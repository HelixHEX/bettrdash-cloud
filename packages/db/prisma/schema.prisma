generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int       @id @default(autoincrement())
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  oauth_accounts         Oauth_account[]
  session                Session[]
  email                  String    @unique
  name                   String
  password               String
  profile_img            String?
  show_inactive_projects Boolean   @default(false)
  api_key                Apikey?
  projects               Project[]
  role                   String    @default("user")
  websites               Website[]
  plan                   String    @default("hobby")
}

model Oauth_account {
  id                Int       @id @default(autoincrement())
  expiresAt         DateTime?
  provider_id       String
  provider_user_id  String
  provider_username String
  user              User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId            Int
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User?     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}


model Project {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  name             String    @db.Citext
  github_url       String?
  language         String?
  description      String?
  active           Boolean
  image_url        String    @default("https://res.cloudinary.com/practicaldev/image/fetch/s--qo_Wp38Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e0nl7ziy1la7bpwj7rsp.png")
  owner            User      @relation(fields: [ownerId], references: [id])
  ownerId          Int
  status           String    @default("pending")
  websites         Website[]
  defaultWebsiteId Int?
  live_url         String?
}

model Website {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  url         String   @unique
  environment String?  @default("production")
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   Int?
  status      String   @default("pending")
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     Int
  default     Boolean  @default(false)
  tracking    Boolean  @default(false)
}

model Apikey {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  key             String   @unique
  userId          Int      @unique
  authorized_urls String[]
  user            User     @relation(fields: [userId], references: [id])
}

model Service {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  prefix    String
  target    String
  name      String
  status    String   @default("pending")
}
